#------------------------------------------------------#
#         merge ASAP, honoraria, and call notes        #
#------------------------------------------------------#
merge_asap_speaker <- merge(asap_2010_to_2012_agg, speaker_agg, by.x = "full_name", by.y = "Speaker", all = T)
merge_asap_speaker_callnotes <- merge(merge_asap_speaker, call_notes_agg, by = c("full_name", "qcor_id"), all = T)
print(head(merge_asap_speaker_callnotes[order(-total_honoraria)], 20))
# these top 20 all seem to match up, though numbers aren't exactly the same
#------------------------------------------------------#
#         merge call notes and concur expense          #
#------------------------------------------------------#
concur_entertainment <- data.table(readRDS(paste0(temp_path, '/concur_entertainment.rds')))
concur_meal          <- data.table(readRDS(paste0(temp_path, '/concur_meal.rds')))
concur <- rbind(concur_entertainment, concur_meal)
concur$`Employee Name` <- paste(concur$`Employee First Name`, concur$`Employee Last Name`)
concur <- concur[,c("Employee ID", "Employee Name", "Entry Attendee Names", "Entry Date", "Entry Amount Due")]
### step 1: make list of physicians called by questcor employees
call_notes_roster <- unique(call_notes[,c("full_name", "qcor_id", "caller_name")])
call_notes_roster$last_name <- toupper(gsub("^.* ", "", call_notes_roster$full_name))
### step 2: for each expense, clean names down to just last names
# helper functions
name_cleaning_step <- function(regex, replacement, n) {
# clean for parameter regex
s1 <- concur$attendee_last_names
for (i in 1:ifelse(!missing(n),n,1)) s1 <- gsub(regex, ifelse(!missing(replacement), replacement, ""), s1)
# clean up for extra spaces, commas, etc.
s2 <- gsub(" {2,}", " ", s1)
s3 <- gsub(" +, ", ",", s2)
s4 <- gsub(",{2,}", ",", s3)
s5 <- trimws(s4)
return(s5)
}
clean_stopword <- function(word_regex) name_cleaning_step(paste0("( |^)", word_regex, "( |,|$)"), " ")
# remove common occuring words and strings
concur$attendee_last_names <- toupper(concur$`Entry Attendee Names`)
concur$attendee_last_names <- name_cleaning_step("[0-9]+")                        # remove numbers
concur$attendee_last_names <- name_cleaning_step("( |^)(DR|MR|MRS|MS|MD|PHD|RN|JR|III|IV)( |\\.|$)",
replacement = " ", n = 2)        # remove titles v1
concur$attendee_last_names <- name_cleaning_step(" (DR|MR|MRS|MS|MD|PHD|RN|JR|III|IV),",
replacement = ",")               # remove titles v2
concur$attendee_last_names <- name_cleaning_step("(\\.|&|#|_|\\(|\\)|\\/)")       # remove special characters
concur$attendee_last_names <- name_cleaning_step("(' |'S |MULTIPLE )?OFFICE(S)?") # remove offices (including possessive offices)
concur$attendee_last_names <- name_cleaning_step("(' |'S |MULTIPLE )?GUEST(S)?")  # remove guest(s) (including possessive offices)
concur$attendee_last_names <- name_cleaning_step(" AND ", " ")                    # remove AND (middle of sentence)
concur$attendee_last_names <- clean_stopword("STAFF")
concur$attendee_last_names <- clean_stopword("(PPL|PEOPLE)")
concur$attendee_last_names <- clean_stopword("MEMBER(S)")
concur$attendee_last_names <- clean_stopword("ME")
concur$attendee_last_names <- clean_stopword("SELF")
concur$attendee_last_names <- clean_stopword("VARIOUS")
concur$attendee_last_names <- clean_stopword("ASSOCIATES")
concur$attendee_last_names <- clean_stopword("PATIENT")
concur$attendee_last_names <- clean_stopword("DOCTOR")
concur$attendee_last_names <- clean_stopword("INTERN")
concur$attendee_last_names <- name_cleaning_step("( |^)[A-Z]+ ", " ", n = 10) # only keep last names
concur$attendee_last_names <- name_cleaning_step(", [A-Z]+ ", ", ")
concur$attendee_last_names <- name_cleaning_step("( )?,( )?", ",") # remove any whitespace around commas
# calculate number of attendees and amount per attendee
concur$n_attendees <- unlist(lapply(strsplit(concur$attendee_last_names, split = ","), length))
concur$`Entry Amount Due` <- as.double(concur$`Entry Amount Due`)
concur$amount_per_attendee <- concur$`Entry Amount Due` / concur$n_attendees
concur <- concur[n_attendees > 0]
# split and transpose
concur <- concur %>% separate(attendee_last_names,
into = unlist(lapply(1:max(concur$n_attendees), function (x) paste0("name_", x))),
sep = ",")
setcolorder(concur, c(names(concur)[1:5], "n_attendees", "amount_per_attendee", names(concur)[6:127]))
# transform from wide to tall
concur_tall <- melt(concur, id.vars = names(concur)[1:7], measure.vars = names(concur)[8:129],
value.name = "physician_last_name", na.rm = T)
# merge via last name from call notes (getting qcor_id)
merge_concur_call_notes <- merge(concur_tall, call_notes_roster,
by.x = c("Employee Name", "physician_last_name"), by.y = c("caller_name", "last_name"), all = T)
merge_concur_call_notes <- merge_concur_call_notes[!is.na(qcor_id) & !is.na(amount_per_attendee)]
# aggregate by physician / qcor_id
merge_concur_call_notes_agg <- merge_concur_call_notes[, .(n_expenses = .N, total_expenses = sum(amount_per_attendee)),
by = list(full_name, qcor_id)]
#------------------------------------------------------#
#             merge concur onto master data            #
#------------------------------------------------------#
merge_concur_call_notes_agg$full_name <- toupper(merge_concur_call_notes_agg$full_name)
master_by_physician <- merge(merge_asap_speaker_callnotes, merge_concur_call_notes_agg, by = c("full_name", "qcor_id"), all = T)
#------------------------------------------------------#
#                calculate gov't stats                 #
#------------------------------------------------------#
# add flags for has_honoraria, has_expense, has_meal
master_by_physician$prescribed <- ifelse(!is.na(master_by_physician$n_referrals) & master_by_physician$n_referrals > 0, 1, 0)
master_by_physician$has_honoraria <- ifelse(!is.na(master_by_physician$total_honoraria) & master_by_physician$total_honoraria > 0, 1, 0)
master_by_physician$has_expense <- ifelse(!is.na(master_by_physician$total_expenses) & master_by_physician$total_expenses > 0, 1, 0)
master_by_physician$has_meal <- ifelse(!is.na(master_by_physician$n_meals) & master_by_physician$n_meals > 0, 1, 0)
master_by_physician$has_call <- ifelse(!is.na(master_by_physician$n_calls) & master_by_physician$n_calls > 0, 1, 0)
# count number of physicians with various flags
dim(master_by_physician[prescribed == 1 & has_honoraria == 1])[1]
dim(master_by_physician[prescribed == 1 & (has_honoraria == 1 | has_expense == 1)])[1]
dim(master_by_physician[prescribed == 1 & (has_honoraria == 1 | has_expense == 1 | has_meal == 1)])[1]
dim(master_by_physician[prescribed == 1])[1]
# get list of top referrers in asap
top100_physicians_name <- head(asap_2010_to_2012_agg[order(-n_referrals)], 100)$full_name
top100_physicians_id   <- head(asap_2010_to_2012_agg[order(-n_referrals)], 100)$qcor_id
master_by_physician_top100 <- head(master_by_physician[order(-n_referrals)], 50)
dim(master_by_physician_top100[prescribed == 1 & has_honoraria == 1])[1]
dim(master_by_physician_top100[prescribed == 1 & (has_honoraria == 1 | has_expense == 1)])[1]
dim(master_by_physician_top100[prescribed == 1 & (has_honoraria == 1 | has_expense == 1 | has_meal == 1)])[1]
dim(master_by_physician_top100[prescribed == 1])[1]
# get amount paid to how many prescribers
master_by_prescribing_physician  <- master_by_physician[prescribed == 1]
dim(master_by_prescribing_physician)
sum(master_by_prescribing_physician$total_honoraria, na.rm = T) + sum(master_by_prescribing_physician$total_expenses, na.rm = T)
# get amount paid per HCP
total_payed = (sum(master_by_physician$total_honoraria, na.rm = T) + sum(master_by_physician$total_expenses, na.rm = T))
total_payed / dim(master_by_physician)[1]
total_payed / dim(master_by_physician[has_honoraria == 1])[1]
total_payed / dim(master_by_physician[has_honoraria == 1 | has_expense == 1])[1]
total_payed / dim(master_by_physician[has_honoraria == 1 | has_expense == 1 | has_meal == 1])[1]
total_payed / dim(master_by_physician[has_honoraria == 1 | has_expense == 1 | has_call == 1])[1]
#------------------------------------------------------#
#    calculate scripts generated by top 10 speakers    #
#------------------------------------------------------#
top10_speakers_by_honoraria <- head(master_by_physician[order(-total_honoraria)], 10)
top10_speakers_by_programs  <- head(master_by_physician[order(-n_programs)], 10)
write.xlsx(top10_speakers_by_honoraria, paste0(out_path, '/2018.06.13 - Top 10 Speakers.xlsx'), sheetName = "By Honoraria", showNA = F)
write.xlsx(top10_speakers_by_programs, paste0(out_path, '/2018.06.13 - Top 10 Speakers.xlsx'), sheetName = "By Programs", showNA = F)
write.xlsx(top10_speakers_by_honoraria, paste0(out_path, '/2018.06.13 - Top 10 Speakers.xlsx'),
sheetName = "By Honoraria", showNA = F, append = T)
write.xlsx(top10_speakers_by_programs, paste0(out_path, '/2018.06.13 - Top 10 Speakers.xlsx'),
sheetName = "By Programs", showNA = F, append = T)
head(asap_2010_to_2012)
View(master_by_physician)
top10_speakers_by_honoraria <- head(master_by_physician[order(-total_honoraria)], 10)
top10_speakers_by_programs  <- head(master_by_physician[order(-n_programs)], 10)
top10_speakers_by_honoraria
head(master_by_physician[order(-total_expenses)],20)
########################################################
# Case:    Questcor Acthar 020324                      #
# Program: Kickback statistic check                    #
# Updated: June 8, 2018                                #
########################################################
# clear old variables
rm(list = ls())
#------------------------------------------------------#
#       import packages and define folder paths        #
#------------------------------------------------------#
library(readxl)
library(data.table)
library(tidyr)
library(xlsx)
case_path <- "//agbonas1/health/Health/Health Case/Questcor 020324/"
base_path <- paste0(case_path, "MPK PAP/Analysis/Kickbacks/R/")
in_path   <- paste0(base_path, "Input")
out_path  <- paste0(base_path, "Output")
temp_path <- paste0(base_path, "Temp")
#------------------------------------------------------#
#                aggregate call notes                  #
#------------------------------------------------------#
call_notes <- data.table(readRDS(paste0(temp_path, '/call_notes.rds')))
call_notes$meal <- ifelse(grepl("(BREAKFAST|LUNCH|DINNER)", toupper(call_notes$activity_type)), 1, 0)
# seems to make a difference if we allow for "BREAKFAST" to be in activity vs. just be whole activity
call_notes_agg <- call_notes[, .(n_calls = .N, n_meals = sum(meal), share_meals = sum(meal) / .N), by = list(full_name, qcor_id)]
call_notes_agg$full_name <- toupper(call_notes_agg$full_name)
# checking values against p.12 of Acthar 19AUG2013 presentation
call_notes[, .(n_calls = .N, n_meals = sum(meal), share_meals = sum(meal) / .N), by = list(year(date))][order(year),]
# number of calls on ppt seems very different from these numbers
# these numbers line up with the raw data, should investigate
#------------------------------------------------------#
#                 aggregate honoraria                  #
#------------------------------------------------------#
speaker <- data.table(readRDS(paste0(temp_path, '/speaker.rds')))
speaker_agg <- speaker[!is.na(Speaker), .(n_programs = .N, total_honoraria = sum(Honoraria, na.rm = T)),
by = Speaker][order(-n_programs)]
#------------------------------------------------------#
#              aggregate ASAP 2010 to 2012             #
#------------------------------------------------------#
asap_2010_to_2012 <- data.table(readRDS(paste0(temp_path, '/asap_2010_to_2012.rds')))
asap_2010_to_2012$full_name <- gsub(" ([A-z]|\\-| )+ ", " ", asap_2010_to_2012$full_name)
asap_2010_to_2012_agg <- asap_2010_to_2012[, .(n_referrals = .N), by = list(full_name, qcor_id)]
asap_2010_to_2012_agg$full_name <- toupper(asap_2010_to_2012_agg$full_name)
#------------------------------------------------------#
#         merge ASAP, honoraria, and call notes        #
#------------------------------------------------------#
merge_asap_speaker <- merge(asap_2010_to_2012_agg, speaker_agg, by.x = "full_name", by.y = "Speaker", all = T)
merge_asap_speaker_callnotes <- merge(merge_asap_speaker, call_notes_agg, by = c("full_name", "qcor_id"), all = T)
print(head(merge_asap_speaker_callnotes[order(-total_honoraria)], 20))
# these top 20 all seem to match up, though numbers aren't exactly the same
#------------------------------------------------------#
#         merge call notes and concur expense          #
#------------------------------------------------------#
concur_entertainment <- data.table(readRDS(paste0(temp_path, '/concur_entertainment.rds')))
concur_meal          <- data.table(readRDS(paste0(temp_path, '/concur_meal.rds')))
concur <- rbind(concur_entertainment, concur_meal)
concur$`Employee Name` <- paste(concur$`Employee First Name`, concur$`Employee Last Name`)
concur <- concur[,c("Employee ID", "Employee Name", "Entry Attendee Names", "Entry Date", "Entry Amount Due")]
### step 1: make list of physicians called by questcor employees
call_notes_roster <- unique(call_notes[,c("full_name", "qcor_id", "caller_name")])
call_notes_roster$last_name <- toupper(gsub("^.* ", "", call_notes_roster$full_name))
### step 2: for each expense, clean names down to just last names
# helper functions
name_cleaning_step <- function(regex, replacement, n) {
# clean for parameter regex
s1 <- concur$attendee_last_names
for (i in 1:ifelse(!missing(n),n,1)) s1 <- gsub(regex, ifelse(!missing(replacement), replacement, ""), s1)
# clean up for extra spaces, commas, etc.
s2 <- gsub(" {2,}", " ", s1)
s3 <- gsub(" +, ", ",", s2)
s4 <- gsub(",{2,}", ",", s3)
s5 <- trimws(s4)
return(s5)
}
clean_stopword <- function(word_regex) name_cleaning_step(paste0("( |^)", word_regex, "( |,|$)"), " ")
# remove common occuring words and strings
concur$attendee_last_names <- toupper(concur$`Entry Attendee Names`)
concur$attendee_last_names <- name_cleaning_step("[0-9]+")                        # remove numbers
concur$attendee_last_names <- name_cleaning_step("( |^)(DR|MR|MRS|MS|MD|PHD|RN|JR|III|IV)( |\\.|$)",
replacement = " ", n = 2)        # remove titles v1
concur$attendee_last_names <- name_cleaning_step(" (DR|MR|MRS|MS|MD|PHD|RN|JR|III|IV),",
replacement = ",")               # remove titles v2
concur$attendee_last_names <- name_cleaning_step("(\\.|&|#|_|\\(|\\)|\\/)")       # remove special characters
concur$attendee_last_names <- name_cleaning_step("(' |'S |MULTIPLE )?OFFICE(S)?") # remove offices (including possessive offices)
concur$attendee_last_names <- name_cleaning_step("(' |'S |MULTIPLE )?GUEST(S)?")  # remove guest(s) (including possessive offices)
concur$attendee_last_names <- name_cleaning_step(" AND ", " ")                    # remove AND (middle of sentence)
concur$attendee_last_names <- clean_stopword("STAFF")
concur$attendee_last_names <- clean_stopword("(PPL|PEOPLE)")
concur$attendee_last_names <- clean_stopword("MEMBER(S)")
concur$attendee_last_names <- clean_stopword("ME")
concur$attendee_last_names <- clean_stopword("SELF")
concur$attendee_last_names <- clean_stopword("VARIOUS")
concur$attendee_last_names <- clean_stopword("ASSOCIATES")
concur$attendee_last_names <- clean_stopword("PATIENT")
concur$attendee_last_names <- clean_stopword("DOCTOR")
concur$attendee_last_names <- clean_stopword("INTERN")
concur$attendee_last_names <- name_cleaning_step("( |^)[A-Z]+ ", " ", n = 10) # only keep last names
concur$attendee_last_names <- name_cleaning_step(", [A-Z]+ ", ", ")
concur$attendee_last_names <- name_cleaning_step("( )?,( )?", ",") # remove any whitespace around commas
# calculate number of attendees and amount per attendee
concur$n_attendees <- unlist(lapply(strsplit(concur$attendee_last_names, split = ","), length))
concur$`Entry Amount Due` <- as.double(concur$`Entry Amount Due`)
concur$amount_per_attendee <- concur$`Entry Amount Due` / concur$n_attendees
concur <- concur[n_attendees > 0]
# split and transpose
concur <- concur %>% separate(attendee_last_names,
into = unlist(lapply(1:max(concur$n_attendees), function (x) paste0("name_", x))),
sep = ",")
setcolorder(concur, c(names(concur)[1:5], "n_attendees", "amount_per_attendee", names(concur)[6:127]))
# transform from wide to tall
concur_tall <- melt(concur, id.vars = names(concur)[1:7], measure.vars = names(concur)[8:129],
value.name = "physician_last_name", na.rm = T)
# merge via last name from call notes (getting qcor_id)
merge_concur_call_notes <- merge(concur_tall, call_notes_roster,
by.x = c("Employee Name", "physician_last_name"), by.y = c("caller_name", "last_name"), all = T)
merge_concur_call_notes <- merge_concur_call_notes[!is.na(qcor_id) & !is.na(amount_per_attendee)]
# aggregate by physician / qcor_id
merge_concur_call_notes_agg <- merge_concur_call_notes[, .(n_expenses = .N, total_expenses = sum(amount_per_attendee)),
by = list(full_name, qcor_id)]
#------------------------------------------------------#
#             merge concur onto master data            #
#------------------------------------------------------#
merge_concur_call_notes_agg$full_name <- toupper(merge_concur_call_notes_agg$full_name)
master_by_physician <- merge(merge_asap_speaker_callnotes, merge_concur_call_notes_agg, by = c("full_name", "qcor_id"), all = T)
#------------------------------------------------------#
#                calculate gov't stats                 #
#------------------------------------------------------#
# add flags for has_honoraria, has_expense, has_meal
master_by_physician$prescribed <- ifelse(!is.na(master_by_physician$n_referrals) & master_by_physician$n_referrals > 0, 1, 0)
master_by_physician$has_honoraria <- ifelse(!is.na(master_by_physician$total_honoraria) & master_by_physician$total_honoraria > 0, 1, 0)
master_by_physician$has_expense <- ifelse(!is.na(master_by_physician$total_expenses) & master_by_physician$total_expenses > 0, 1, 0)
master_by_physician$has_meal <- ifelse(!is.na(master_by_physician$n_meals) & master_by_physician$n_meals > 0, 1, 0)
master_by_physician$has_call <- ifelse(!is.na(master_by_physician$n_calls) & master_by_physician$n_calls > 0, 1, 0)
# count number of physicians with various flags
dim(master_by_physician[prescribed == 1 & has_honoraria == 1])[1]
dim(master_by_physician[prescribed == 1 & (has_honoraria == 1 | has_expense == 1)])[1]
dim(master_by_physician[prescribed == 1 & (has_honoraria == 1 | has_expense == 1 | has_meal == 1)])[1]
dim(master_by_physician[prescribed == 1])[1]
# get list of top referrers in asap
top100_physicians_name <- head(asap_2010_to_2012_agg[order(-n_referrals)], 100)$full_name
top100_physicians_id   <- head(asap_2010_to_2012_agg[order(-n_referrals)], 100)$qcor_id
master_by_physician_top100 <- head(master_by_physician[order(-n_referrals)], 50)
dim(master_by_physician_top100[prescribed == 1 & has_honoraria == 1])[1]
dim(master_by_physician_top100[prescribed == 1 & (has_honoraria == 1 | has_expense == 1)])[1]
dim(master_by_physician_top100[prescribed == 1 & (has_honoraria == 1 | has_expense == 1 | has_meal == 1)])[1]
dim(master_by_physician_top100[prescribed == 1])[1]
# get amount paid to how many prescribers
master_by_prescribing_physician  <- master_by_physician[prescribed == 1]
dim(master_by_prescribing_physician)
sum(master_by_prescribing_physician$total_honoraria, na.rm = T) + sum(master_by_prescribing_physician$total_expenses, na.rm = T)
# get amount paid per HCP
total_payed = (sum(master_by_physician$total_honoraria, na.rm = T) + sum(master_by_physician$total_expenses, na.rm = T))
total_payed / dim(master_by_physician)[1]
total_payed / dim(master_by_physician[has_honoraria == 1])[1]
total_payed / dim(master_by_physician[has_honoraria == 1 | has_expense == 1])[1]
total_payed / dim(master_by_physician[has_honoraria == 1 | has_expense == 1 | has_meal == 1])[1]
total_payed / dim(master_by_physician[has_honoraria == 1 | has_expense == 1 | has_call == 1])[1]
#------------------------------------------------------#
#    calculate scripts generated by top 10 speakers    #
#------------------------------------------------------#
top10_speakers_by_honoraria <- head(master_by_physician[order(-total_honoraria)], 10)
top10_speakers_by_programs  <- head(master_by_physician[order(-n_programs)], 10)
write.csv(top10_speakers_by_honoraria, paste0(out_path, '/2018.06.13 - Top 10 Speakers by Honoraria.csv'), na = "")
write.csv(top10_speakers_by_programs, paste0(out_path, '/2018.06.13 - Top 10 Speakers by Program.csv'), na = "")
head(master_by_physician[order(-total_expenses)], 20)
today()
Sys.Date()
format(Sys.Date(), "%b%d%Y")
format(Sys.Date(), "%d%b%Y")
toupper(format(Sys.Date(), "%d%b%Y"))
curr_date <- tolower(format(Sys.Date(), "%d%b%Y"))
paste0("call_notes_", curr_date, ".rds")
??sas7bdat
?write.sas7bda
?write.csv
# clear old variables
rm(list = ls())
# import packages
library(readxl)
library(data.table)
library(sas7bdat)
# define folder paths
case_path <- "//ace/data/health3/Questcor_2018_020324/"
base_path <- paste0(case_path, "Data/1 Call Notes/")
in_path   <- paste0(base_path, "Input")
out_path  <- paste0(base_path, "Output")
down_path <- paste0(base_path, "Downstream")
# clear old variables
rm(list = ls())
# import packages
library(readxl)
library(data.table)
# define folder paths
case_path <- "//ace/data/health3/Questcor_2018_020324/"
base_path <- paste0(case_path, "Data/1 Call Notes/")
in_path   <- paste0(base_path, "Input")
out_path  <- paste0(base_path, "Output")
down_path <- paste0(base_path, "Downstream")
# loop through files in folder and read in
cn_dir   <- in_path
cn_files <- list.files(cn_dir)
for (file in cn_files) {
# don't parse temp xlsx files
if (!grepl("~\\$", file)) {
# convert file name into clean name for variable (to store data from each file)
print(file)
file_var <- paste0('call_notes_partial_', gsub("([.]|[-])", "_", gsub("[.]xlsx", "", file)))
# save content of xlsx file and drop last 6 rows (includes unneeded footer information)
assign(file_var, read_excel(paste0(cn_dir, '/', file)))
assign(file_var, head(get(file_var), -6))
}
}
# loop through files in folder and read in
cn_files <- list.files(in_path)
for (file in cn_files) {
# don't parse temp xlsx files
if (!grepl("~\\$", file)) {
# convert file name into clean name for variable (to store data from each file)
print(file)
file_var <- paste0('call_notes_partial_', gsub("([.]|[-])", "_", gsub("[.]xlsx", "", file)))
# save content of xlsx file and drop last 6 rows (includes unneeded footer information)
assign(file_var, read_excel(paste0(cn_dir, '/', file)))
assign(file_var, head(get(file_var), -6))
}
}
#------------------------------------------------------#
#         stack all years and relabel variables        #
#------------------------------------------------------#
# stack all call_notes_partial_ files and delete partials
call_notes <- data.table(do.call("rbind", mget(ls(pattern = "call_notes_partial_"))))
rm(list = ls(pattern = "call_notes_partial_"))
# relabel columns
names(call_notes) <- c("full_name", "qcor_id", "caller_name", "call_created_date", "date", "detailed_product",
"activity_type", "call_notes", "call_objectives", "referrals_received_last_12mo",
"referrals_shipped_last_12mo")
#------------------------------------------------------#
#                formatting and cleaning               #
#------------------------------------------------------#
# convert all variables to upcase
for (var in names(call_notes)) {
if (typeof(call_notes[[var]]) == "character") call_notes[[var]] <- toupper(call_notes[[var]])
}
#------------------------------------------------------#
#                    output dataset                    #
#------------------------------------------------------#
# get current date (to include in file names)
curr_date <- tolower(format(Sys.Date(), "%d%b%Y"))
# save as R dataset
saveRDS(call_notes, paste0("call_notes_", curr_date, ".rds"))
# save for other programs (SAS, Stata, Excel)
write.csv(call_notes, paste0("call_notes_", curr_date, ".csv"))
getcwd()
getwd()
# get current date (to include in file names)
curr_date <- tolower(format(Sys.Date(), "%d%b%Y"))
# save as R dataset
saveRDS(call_notes, paste0(down_path, "/call_notes_", curr_date, ".rds"))
# save for other programs (SAS, Stata, Excel)
write.csv(call_notes, paste0(down_path, "/call_notes_", curr_date, ".csv"))
shiny::runApp('//ace/data/case2/FCA_Model_Dev_980346/Level 2 - FCA Model/App')
shiny::runApp('//ace/data/case2/FCA_Model_Dev_980346/Level 2 - FCA Model/App')
shiny::runApp('//ace/data/case2/FCA_Model_Dev_980346/Level 2 - FCA Model/App')
shiny::runApp('//ace/data/case2/FCA_Model_Dev_980346/Level 2 - FCA Model/App')
shiny::runApp('//ace/data/case2/FCA_Model_Dev_980346/Level 2 - FCA Model/App')
install.packages("limma")
library(shiny); runApp('//ace/data/case/Morris-Dickson_030331/Permanent Threshold Analysis/R/Flagging Curve App.R')
library(shiny); runApp('//ace/data/case/Morris-Dickson_030331/Permanent Threshold Analysis/R/Flagging Curve App.R')
library(shiny); runApp('//ace/data/case/Morris-Dickson_030331/Permanent Threshold Analysis/R/Flagging Curve App.R')
sessions <- 111:115
bill_types <- c("hr", "s")
for (session in sessions) {
for (bill_type in bill_types) {
print(paste(session, bill_type))
}
}
setwd('mvp-congress/data')
setwd("C:/Users/btanen/Desktop/mvp-congress/data")
setwd('C:/Users/btanen/Desktop/mvp-congress/data')
library(data.table)
# import general bill data
setwd('C:/Users/btanen/Desktop/mvp-congress/data')
sessions <- 111:115
bill_types <- c("hr")
for (session in sessions) {
for (bill_type in bill_types) {
print(paste(session, bill_type))
dt_temp <- data.table(read.csv(paste0('general-', bill_type, session, '.csv')))
assign(paste0(bill_type, session), dt_temp)
}
}
View(hr111)
View(hr113)
read.csv('general-hr111.csv')
?read.csv
read.csv('general-hr111.csv', check.names = F)
for (session in sessions) {
for (bill_type in bill_types) {
print(paste(session, bill_type))
dt_temp <- data.table(read.csv(paste0('general-', bill_type, session, '.csv'), check.names = F))
assign(paste0(bill_type, session), dt_temp)
}
}
View(hr111)
hr111$`_passed_house`
hr111$`_passed_house`[1]
hr111$`_passed_house`[1] == T
hr111$`_passed_house`[1] == F
hr111$`_passed_house`[1] == "True"
for (col in names(hr111)) { print(typeof(hr111[[col]])) }
names(hr111)
typeof(hr111$_`_official_title`)
typeof(hr111$`_official_title`)
?rbindlist
?ls
rm(dt_temp)
ls()
paste0(sessions, collapse = "|")
paste0("(", sessions, collapse = "|")
paste0("(", paste0(bill_types, collapse = "|"), ")(", paste0(sessions, collapse = "|"), ")")
ls(pattern = paste0("(", paste0(bill_types, collapse = "|"), ")(", paste0(sessions, collapse = "|"), ")"))
ls(pattern = paste0("(", paste0(bill_types, collapse = "|"), ")[0-9]+"))
rbindlist(ls(pattern = paste0("(", paste0(bill_types, collapse = "|"), ")[0-9]+")))
rbindlist(list(ls(pattern = paste0("(", paste0(bill_types, collapse = "|"), ")[0-9]+"))))
rbind_all(mget(ls(pattern = paste0("(", paste0(bill_types, collapse = "|"), ")[0-9]+"))))
rbindlist(mget(ls(pattern = paste0("(", paste0(bill_types, collapse = "|"), ")[0-9]+"))))
6683+6526+5885+6723+6562
dt <- rbindlist(mget(ls(pattern = paste0("(", paste0(bill_types, collapse = "|"), ")[0-9]+"))))
is.data.table(dt)
dt[, _passed_house := ifelse(_passed_house == "True", T, F)]
for (var in names(dt)) {
print(var)
}
gsub("_", "", c("_a", "_b"))
gsub("^_", "", names(dt))
names(dt) <- gsub("^_", "", names(dt))
dt[, passed_house := ifelse(passed_house == "True", T, F)]
dt[, passed_senate := ifelse(passed_senate == "True", T, F)]
View(dt)
dt[session >= 112]
dt[grepl("American", short_title)]
dt$introduced
hour(dt$introduced)
month(dt$introduced)
year(dt$introduced)
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T & passed_senate == T])),
by = list(year(introduced))]
View(dt)
View(dt_agg)
dt[year(introduced) == 2017 & grepl("ENACTED", status)]
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T & passed_senate == T])),
by = list(year(introduced), session)]
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T & passed_senate == T])),
by = list(year(introduced))]
144+79
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T & passed_senate == T])),
by = list(year(introduced))]
dt_agg[, pass_rate := n_passed / n_bills]
# calculate number of bills and number that passed both houses by year
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T & passed_senate == T])),
by = list(year(introduced))]
dt_agg[, pass_rate := n_passed / n_bills]
# plot
ggplot(dt_agg, aes(x = year, y = pass_rate)) + geom_line()
library(ggplot2)
ggplot(dt_agg, aes(x = year, y = pass_rate)) + geom_line()
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T])),
by = list(year(introduced))]
dt_agg[, pass_rate := n_passed / n_bills]
ggplot(dt_agg, aes(x = year, y = pass_rate)) + geom_line()
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T & passed_senate == T])),
by = list(year(introduced))]
dt_agg[, pass_rate := n_passed / n_bills]
ggplot(dt_agg, aes(x = year, y = pass_rate)) + geom_line()
dt_agg <- dt[, .(n_bills = .N, n_passed = nrow(.SD[passed_house == T & passed_senate == T])),
by = list(session)]
dt_agg[, pass_rate := n_passed / n_bills]
sys.frame(1)$ofile
sys.frame(1)$ofile
sys.frame(1)$ofile
data_path <- paste0(case_path, "Permanent Threshold Analysis/R/Data")
